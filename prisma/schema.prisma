generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// 这个是指「三方账户」
model Account {
  id                   Int  @id @default(autoincrement())
  user_id              Int
  type                 String
  provider             String
  // 唯一 id
  provider_account_id  String
  refresh_token        String?
  access_token         String?
  expires_at           Int?
  token_type           String?
  scope                String?
  id_token             String?
  session_state        String?

  user                 User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([provider, provider_account_id])
  @@map("accounts")
}

model User {
  id               Int          @id @default(autoincrement())
  email            String?      @unique
  email_verified   DateTime?

  profile          Profile?
  // 账号
  accounts         Account[]
  credential       Credential?
  subscription     Subscription?
  captions         Caption[]
  exam_scenes      ExamScene[]
  notes            Note[]
  words            Word[]
  spelling         SpellingResult[]
  score_records    ScoreRecord[]
  // packages         Package[]
  check_in_records CheckInRecord[]
  star_records     StarRecord[]
  score            Score?
  rank             Rank?

  created_at       DateTime  @default(now())
  updated_at       DateTime  @default(now())

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String          @unique
  expires    DateTime

  status     Int             @default(1)
  user_id    Int?

  @@unique([identifier, token])
  @@map("verificationtokens")
}
model Credential {
  user_id          Int          @unique
  user             User         @relation(fields: [user_id], references: [id])

  password         String?
  salt             String?

  @@map("credentials")
}

// 产品，从三方平台同步过来，或自己初始化
model Product {
  id          Int          @id @default(autoincrement())

  active      Boolean      @default(false)
  name        String
  description String?
  image       String?
  metadata    Json?
  created_at  DateTime     @default(now())
  updated_at  DateTime?

  prices      Price[]

  @@map("products")
}

model Price {
  id                Int         @id @default(autoincrement())
  active            Boolean        @default(false)

  product_id        Int        
  product           Product        @relation(fields: [product_id], references: [id], onDelete: Cascade)

  interval          PriceInterval?

  unit_amount       Int?
  interval_count    Int?
  type              PriceType?
  created_at        DateTime       @default(now())
  updated_at        DateTime?

  subscriptions     Subscription[]
  @@map("prices")
}

enum PriceInterval {
  month
  year
}
enum PriceType {
  recurring
  one_time
}

// 订阅
model Subscription {
  id              Int          @id @default(autoincrement())

  type            SubscriptionStatus
  price_id        Int
  price           Price              @relation(fields: [price_id], references: [id])

  // 订阅开始时间
  start_date           DateTime?
  // 订阅结束时间
  ended_at             DateTime?
  // 试用开始
  trial_start          DateTime?
  // 试用结束
  trial_end            DateTime?
  // 取消时间
  cancel_at            DateTime?
  // 是否在周期内取消
  cancel_at_period_end Boolean?
  // 实际取消时间
  canceled_at          DateTime?

  user_id         Int      
  user            User         @relation(fields: [user_id], references: [id])

  created_at      DateTime     @default(now())
  expired_at      DateTime?

  @@map("subscriptions")
}

enum SubscriptionStatus {
  active
  canceled
  incomplete
  incomplete_expired
  past_due
  trialing
  unpaid
}


model Profile {
  nickname        String?
  avatar          String?
  user_id         Int      
  user            User         @relation(fields: [user_id], references: [id])

  @@map("profiles")
}

// 用户拥有的积分
model Score {
  value           Int          @default(0)
  user_id         Int      
  user            User         @relation(fields: [user_id], references: [id])

  @@map("score")
}

model Rank {
  // 等级
  level           Int          @default(1)
  // 经验
  exp             Int          @default(0)

  user_id         Int      
  user            User         @relation(fields: [user_id], references: [id])

  @@map("rank")
}

// 字幕
model Caption {
  id             Int           @id @default(autoincrement())
  title          String
  public         Boolean       @default(false)
  user_id        Int
  movie_id       Int?      

  created_at     DateTime      @default(now())
  updated_at     DateTime?

  user           User          @relation(fields: [user_id], references: [id])
  paragraphs     Paragraph[]
  exam_scenes    ExamScene[]
  notes          Note[]
  star_records   StarRecord[]
}

model Paragraph {
  id           Int      @id @default(autoincrement())
  line         String
  text1        String   @db.LongText
  text2        String   @db.LongText
  start        String
  end          String
  language     String?
  caption_id   Int  

  // 合并的句子切割点
  indexes       String?
  deleted      Boolean  @default(false)

  caption      Caption  @relation(fields: [caption_id], references: [id], onDelete: Cascade)

  exam_scenes  ExamScene[]
  spellings    SpellingResult[]
  words        Word[]
  notes        Note[]

  @@map("paragraphs")
}

// 阅读记录
model Reading {
  id           String    @id @default(cuid())

  @@map("readings")
}

model ExamScene {
  id              Int               @id @default(autoincrement())

// 该测验属于整个测验的第几个
  index           Int               
  status          Int               @default(1)
  type            Int               @default(1)

  caption_id      Int    
  user_id         Int

// 开始句子
  start_id        Int    

  score           Int?                 @default(0)

  spellings       SpellingResult[]
  caption         Caption              @relation(fields: [caption_id], references: [id])
  user            User                 @relation(fields: [user_id], references: [id])
  start           Paragraph            @relation(fields: [start_id], references: [id])

  created_at      DateTime   @default(now())
  begin_at        DateTime?
  ended_at        DateTime?

  @@map("exam_scenes")
}

model SpellingResult {
  id             Int      @id @default(autoincrement())
  type           Int

  user_id        Int

  paragraph_id   Int    


  exam_scene_id  Int?    

  user           User?       @relation(fields: [user_id], references: [id])
  exam_scene     ExamScene?  @relation(fields: [exam_scene_id], references: [id], onDelete: Cascade)
  paragraph      Paragraph   @relation(fields: [paragraph_id], references: [id], onDelete: Cascade)

  input          String?

  created_at     DateTime   @default(now())

  @@map("spelling_results")
}

model Note {
  id                    Int       @id @default(autoincrement())

  content               String    @db.LongText
  text                  String?   @db.LongText
  start                 Int?
  end                   Int?

  caption_id            Int
  caption               Caption @relation(fields: [caption_id], references: [id])

  paragraph_id          Int
  paragraph             Paragraph @relation(fields: [paragraph_id], references: [id])

  user_id               Int  
  user                  User     @relation(fields: [user_id], references: [id])

  created_at            DateTime  @default(now())

  @@map("noets")
}

model Word {
  id                    Int     @id @default(autoincrement())

  text                  String

  user_id               Int       
  user                  User     @relation(fields: [user_id], references: [id])

  paragraph_id          Int?       
  paragraph             Paragraph?     @relation(fields: [paragraph_id], references: [id])

  created_at            DateTime   @default(now())

  @@map("words")
}

// 积分记录
model ScoreRecord {
  id                    Int     @id @default(autoincrement())

  user_id               Int?  
  user                  User?     @relation(fields: [user_id], references: [id])

  type                  Int
  number                Int
  desc                  String?

  created_at            DateTime @default(now())

  @@map("score_records")
}

// 签到记录
model CheckInRecord {
  id                    Int    @id @default(autoincrement())

  user_id               Int?  
  user                  User?     @relation(fields: [user_id], references: [id])

  day                   Int
  // 是否补签
  retroactive           Boolean?  @default(false)
  created_at            DateTime  @default(now())

  @@map("check_in_records")
}


// 游戏道具
model Item {
  id                    Int     @id @default(autoincrement())

  // type                  Int

  name                  String
  desc                  String?
  price                 Int

  @@map("items")
}

// user package
// model Package {
//   id                    Int     @id @default(autoincrement())

//   item_id               Int    
//   item                  Item      @relation(fields: [item_id], references: [id])
//   num                   Int

//   user_id               Int  
//   user                  User     @relation(fields: [user_id], references: [id])

//   @@map("packages")
// }

// 收藏的字幕
model StarRecord {
  id                    Int     @id @default(autoincrement())
  user_id    Int        @unique
  caption_id Int

  user       User       @relation(fields: [user_id], references: [id])
  caption    Caption    @relation(fields: [caption_id], references: [id])

  created_at DateTime   @default(now())

  @@map("start_records")
}
