generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                   String  @id @default(cuid())
  user_id              String  @map("user_id")
  type                 String
  provider             String
  provider_account_id  String
  refresh_token        String?
  access_token         String?
  expires_at           Int?
  token_type           String?
  scope                String?
  id_token             String?
  session_state        String?

  user                 User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([provider, provider_account_id])
  @@map("accounts")
}

model User {
  id               String    @id @default(cuid())
  name             String?
  email            String?   @unique
  email_verified   DateTime?
  avatar           String?
  password         String
  salt             String

  score            Int       @default(0)

  subscription     Subscription?
  accounts         Account[]
  sessions         Session[]
  captions         Caption[]
  exam_scenes      ExamScene[]
  notebooks        Notebook[]
  spelling         SpellingResult[]
  score_records    ScoreRecord[]
  packages         Package[]
  sign             SignRecord[]

  created_at    Int
  last_updated  Int?

  @@map("users")
}

model Session {
  id            String   @id @default(cuid())
  session_token String   @unique
  userId        String   @map("user_id")
  expires       DateTime
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// 订阅（试用、会员）
model Subscription {
  id              String       @id @default(cuid())

  type            Int          @default(1)

  user            User         @relation(fields: [user_id], references: [id])
  user_id          String      

  // 到期时间
  expired_at      Int
  created_at      Int

  @@map("roles")
}

model Caption {
  id             String        @id @default(cuid())
  title          String
  content        String?       @db.LongText
  published      Boolean       @default(false)
  publisher      User          @relation(fields: [publisher_id], references: [id])
  publisher_id   String

  movie_id       String?      

  paragraphs     Paragraph[]
  exam_scenes    ExamScene[]

  created_at     Int
  last_updated   Int?
}

model Paragraph {
  id           String   @id @default(cuid())
  line         String
  text1        String   @db.LongText
  text2        String   @db.LongText
  start        String
  end          String
  language     String?
  caption_id   String  
  deleted      Boolean  @default(false)

  caption      Caption  @relation(fields: [caption_id], references: [id], onDelete: Cascade)

  exam_scenes  ExamScene[]
  // 该段落被拼写（正确、错误、跳过）的记录
  spellings    SpellingResult[]
  // 该段落有哪些单词被记录进单词本
  words        Word[]

  @@map("paragraphs")
}

model Scene {
  id           String   @id @default(cuid())

  // 场景开始段落
  start        String
  // 场景结束段落
  end          String

  @@map("scenes")
}

// 阅读记录
model Reading {
  id           String    @id @default(cuid())

  @@map("readings")
}

model ExamScene {
  id              String               @id @default(cuid())

  status          Int                  @default(1)

  caption_id      String    
  user_id         String

  start_id        String    

  score           Int?                 @default(0)

  spellings       SpellingResult[]
  caption         Caption              @relation(fields: [caption_id], references: [id])
  user            User                @relation(fields: [user_id], references: [id])
  start           Paragraph            @relation(fields: [start_id], references: [id])

  created_at      Int
  begin_at        Int?
  ended_at        Int?

  @@map("exam_scenes")
}

model SpellingResult {
  id             String      @id @default(cuid())
  type           Int

  user_id        String?

  paragraph_id   String    


  exam_scene_id  String?    

  user           User?       @relation(fields: [user_id], references: [id])
  exam_scene     ExamScene?  @relation(fields: [exam_scene_id], references: [id], onDelete: Cascade)
  paragraph      Paragraph   @relation(fields: [paragraph_id], references: [id], onDelete: Cascade)

  input          String?

  created_at     Int

  @@map("spelling_results")
}

model Notebook {
  id                String     @id @default(cuid())

  title             String?

  user              User?     @relation(fields: [user_id], references: [id])
  user_id            String?  

  words             Word[]

  created_at    Int
  last_updated  Int?

  @@map("notebooks")
}

model Word {
  id                    String     @id @default(cuid())

  text                  String

  notebook_id            String       
  notebook              Notebook?     @relation(fields: [notebook_id], references: [id])

  paragraph_id           String       
  paragraph             Paragraph     @relation(fields: [paragraph_id], references: [id])

  created_at            Int

  @@map("words")
}

// 积分记录
model ScoreRecord {
  id                    String     @id @default(cuid())

  user              User?     @relation(fields: [user_id], references: [id])
  user_id            String?  

  type              Int
  number            Int
  desc              String?

  created_at            Int

  @@map("score_records")
}

// 签到记录
model SignRecord {
  id                    String    @id @default(cuid())

  user                  User?     @relation(fields: [user_id], references: [id])
  user_id                String?  

  day                   Int
  // 是否补签
  retroactive           Boolean?  @default(false)
  created_at            Int

  @@map("sign_records")
}


// 游戏道具
model Item {
  id                    String     @id @default(cuid())

  type                  Int

  name                  String
  price                 Int

  packages              Package[]

  created_at            Int

  @@map("items")
}

// user package
model Package {
  id                    String     @id @default(cuid())

  item                  Item      @relation(fields: [item_id], references: [id])
  item_id                String    
  num                   Int

  user                  User     @relation(fields: [user_id], references: [id])
  user_id                String  

  created_at            Int

  @@map("packages")
}
